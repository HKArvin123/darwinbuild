#!/usr/bin/python

from __future__ import print_function
import sys, os
import plistlib
import subprocess

if len(sys.argv) != 3:
    print('Internal tool used by darwinbuild, please do not invoke directly', file=sys.stderr)
    exit(1)

darwin_buildroot = os.getcwd()
if os.getenv('DARWIN_BUILDROOT') is not None:
    darwin_buildroot = os.getenv('DARWIN_BUILDROOT')
    os.chdir(darwin_buildroot)

valid_buildroot = True
for name in ['Roots', 'Sources', 'Symbols', 'Headers', 'Logs']:
    valid_buildroot = os.path.isdir(name)

if not valid_buildroot:
    print('ERROR: Could not find darwinbuild root, this is required', file=sys.stderr)
    print('Please change your working directory to one initialized by:', file=sys.stderr)
    print('\t$ darwinbuild -init <plist>', file=sys.stderr)
    print('Alternatively, you may set the DARWIN_BUILDROOT environment variable to the', file=sys.stderr)
    print('absolute path of that directory.', file=sys.stderr)
    exit(1)

group_mode = False
input_name = sys.argv[2]

if sys.argv[1] == '-g':
    group_mode = True
elif sys.argv[1] != '-p':
    print('ERROR: First argument must be either -g or -p', file=sys.stderr)
    exit(1)

header_deps_done = {}
build_deps_done = {}

def recursive_build(project, is_header=False):
    if project == '': return

    if is_header:
        if project in header_deps_done:
            return
        else:
            header_deps_done[project] = True
    else:
        if project in build_deps_done:
            return
        else:
            build_deps_done[project] = True

    build_deps = subprocess.check_output(['darwinxref', 'dependencies', '-build', project]).split('\n')
    header_deps = subprocess.check_output(['darwinxref', 'dependencies', '-header', project]).split('\n')

    for dep in header_deps:
        recursive_build(dep, is_header=True)
    for dep in build_deps:
        recursive_build(dep, is_header=False)

    darwinbuild_argv = ['darwinbuild']
    if is_header:
        darwinbuild_argv.append('-headers')
    darwinbuild_argv.append(project)

    try:
        subprocess.check_call(darwinbuild_argv, stdout=sys.stdout, stderr=sys.stderr)
    except subprocess.CalledProcessError, e:
        print(' '.join(darwinbuild_argv), 'failed with code', e.returncode, file=sys.stderr)
        exit(1)

if group_mode:
    group_output = subprocess.check_output(['darwinxref', 'group', input_name])
    group_output = group_output.split('\n')
    for line in group_output:
        for project in line.split(' '):
            recursive_build(project)
else:
    recursive_build(input_name)
