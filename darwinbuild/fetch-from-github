#!/usr/bin/python

from __future__ import print_function
import sys, os
import plistlib
import subprocess
import tarfile
import tempfile
import shutil

def popen_exec(argv, cwd=None):
    return subprocess.check_output(argv, universal_newlines=True, cwd=cwd).decode('utf-8')

if len(sys.argv) < 4:
    print('Internal tool used by darwinbuild, please do not invoke directly', file=sys.stderr)
    exit(1)

plist_filename = sys.argv[1]
project_name = sys.argv[2]
project_version = sys.argv[3]
sources_dir = sys.argv[4]
print(sys.argv)
darwinbuild_plist = plistlib.readPlist(plist_filename)

project_data = darwinbuild_plist['projects'][project_name]
if 'github' in project_data:
    url = None
    repo_basename = None
    exact_filename = True

    github_data = project_data['github']
    if isinstance(github_data, str):
        repo_basename = project_name + '-' + project_version
        url = 'https://github.com/{}/archive/{}-{}.tar.gz'.format(github_data, project_name, project_version)
    elif isinstance(github_data, dict):
        repo_parts = github_data['repo'].split('/')
        repo_basename = repo_parts[1] + '-' + github_data['archive']
        url = 'https://github.com/{}/archive/{}.tar.gz'.format(github_data['repo'], github_data['archive'])
        exact_filename = False
    else:
        raise Exception('github data not string or dictionary')

    tarball_filename = project_name + '-' + project_version + '.tar.gz'
    download_path = os.path.join(sources_dir, tarball_filename if exact_filename else tarball_filename + '.orig')
    print('Downloading', url, '...')
    popen_exec(['/usr/bin/curl', '-fLs', '-o', download_path, url])

    if not exact_filename:
        temp_dir = tempfile.mkdtemp(prefix='darwinbuild-fetch-from-github')
        popen_exec(['/usr/bin/tar', 'xf', os.path.join(sources_dir, tarball_filename + '.orig')], cwd=temp_dir)
        shutil.move(os.path.join(temp_dir, repo_basename), os.path.join(temp_dir, project_name + '-' + project_version))
        popen_exec(['/usr/bin/tar', 'czf', os.path.join(sources_dir, tarball_filename), project_name + '-' + project_version], cwd=temp_dir)
        shutil.rmtree(temp_dir, ignore_errors=True)
        os.remove(os.path.join(sources_dir, tarball_filename + '.orig'))
